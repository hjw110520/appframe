def isDebug = true
def config_info = rootProject.ext.android
def lib_info = rootProject.ext.dependencies
if (isDebug.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
android {
    compileSdkVersion config_info.compileSdkVersion
    buildToolsVersion config_info.buildToolsVersion


    defaultConfig {
        applicationId "com.hjw.bookstore"
        minSdkVersion config_info.minSdkVersion
        targetSdkVersion config_info.targetSdkVersion
        versionCode config_info.versionCode
        versionName config_info.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            if (isDebug.toBoolean()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }
    resourcePrefix "bookstore_"
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile lib_info.supportV7
    compile lib_info.recyclerviewV7
    compile lib_info.junit
    compile lib_info.constraintLayout
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    releaseCompile project(path:':base', configuration:'release')
    debugCompile project(path:':base', configuration:'debug')

    releaseCompile project(path:':network', configuration:'release')
    debugCompile project(path:':network', configuration:'debug')

    releaseCompile project(path:':commonui', configuration:'release')
    debugCompile project(path:':commonui', configuration:'debug')
}
